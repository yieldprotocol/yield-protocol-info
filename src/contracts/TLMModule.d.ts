/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TLMModuleInterface extends ethers.utils.Interface {
  functions: {
    "approve(bytes6)": FunctionFragment;
    "borrowingFee()": FunctionFragment;
    "cauldron()": FunctionFragment;
    "joins(bytes6)": FunctionFragment;
    "modules(address)": FunctionFragment;
    "pools(bytes6)": FunctionFragment;
    "register(bytes6,bytes32)": FunctionFragment;
    "sell(bytes6,address,uint256)": FunctionFragment;
    "seriesToIlk(bytes6)": FunctionFragment;
    "tlm()": FunctionFragment;
    "tlmModule()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "approve", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "borrowingFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cauldron", values?: undefined): string;
  encodeFunctionData(functionFragment: "joins", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "modules", values: [string]): string;
  encodeFunctionData(functionFragment: "pools", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sell",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "seriesToIlk",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "tlm", values?: undefined): string;
  encodeFunctionData(functionFragment: "tlmModule", values?: undefined): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cauldron", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "modules", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sell", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "seriesToIlk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tlm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tlmModule", data: BytesLike): Result;

  events: {
    "FeeSet(uint256)": EventFragment;
    "JoinAdded(bytes6,address)": EventFragment;
    "ModuleSet(address,bool)": EventFragment;
    "PoolAdded(bytes6,address)": EventFragment;
    "SeriesRegistered(bytes6,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JoinAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModuleSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SeriesRegistered"): EventFragment;
}

export class TLMModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TLMModuleInterface;

  functions: {
    approve(
      seriesId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    cauldron(overrides?: CallOverrides): Promise<[string]>;

    joins(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    modules(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    pools(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    register(
      seriesId: BytesLike,
      ilk: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sell(
      seriesId: BytesLike,
      to: string,
      fyDaiToSell: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    seriesToIlk(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    tlm(overrides?: CallOverrides): Promise<[string]>;

    tlmModule(overrides?: CallOverrides): Promise<[string]>;
  };

  approve(
    seriesId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowingFee(overrides?: CallOverrides): Promise<BigNumber>;

  cauldron(overrides?: CallOverrides): Promise<string>;

  joins(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  modules(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  pools(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  register(
    seriesId: BytesLike,
    ilk: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sell(
    seriesId: BytesLike,
    to: string,
    fyDaiToSell: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  seriesToIlk(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  tlm(overrides?: CallOverrides): Promise<string>;

  tlmModule(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    approve(seriesId: BytesLike, overrides?: CallOverrides): Promise<void>;

    borrowingFee(overrides?: CallOverrides): Promise<BigNumber>;

    cauldron(overrides?: CallOverrides): Promise<string>;

    joins(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    modules(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    pools(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    register(
      seriesId: BytesLike,
      ilk: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    sell(
      seriesId: BytesLike,
      to: string,
      fyDaiToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seriesToIlk(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    tlm(overrides?: CallOverrides): Promise<string>;

    tlmModule(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    FeeSet(fee?: null): TypedEventFilter<[BigNumber], { fee: BigNumber }>;

    JoinAdded(
      assetId?: BytesLike | null,
      join?: string | null
    ): TypedEventFilter<[string, string], { assetId: string; join: string }>;

    ModuleSet(
      module?: string | null,
      set?: boolean | null
    ): TypedEventFilter<[string, boolean], { module: string; set: boolean }>;

    PoolAdded(
      seriesId?: BytesLike | null,
      pool?: string | null
    ): TypedEventFilter<[string, string], { seriesId: string; pool: string }>;

    SeriesRegistered(
      seriesId?: BytesLike | null,
      ilk?: BytesLike | null
    ): TypedEventFilter<[string, string], { seriesId: string; ilk: string }>;
  };

  estimateGas: {
    approve(
      seriesId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowingFee(overrides?: CallOverrides): Promise<BigNumber>;

    cauldron(overrides?: CallOverrides): Promise<BigNumber>;

    joins(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    modules(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    pools(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    register(
      seriesId: BytesLike,
      ilk: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sell(
      seriesId: BytesLike,
      to: string,
      fyDaiToSell: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    seriesToIlk(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    tlm(overrides?: CallOverrides): Promise<BigNumber>;

    tlmModule(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    approve(
      seriesId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cauldron(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    joins(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    modules(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pools(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    register(
      seriesId: BytesLike,
      ilk: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sell(
      seriesId: BytesLike,
      to: string,
      fyDaiToSell: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    seriesToIlk(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tlm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tlmModule(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
