/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PoolMockInterface extends ethers.utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "base()": FunctionFragment;
    "baseReserves()": FunctionFragment;
    "burn(address,uint256,uint256)": FunctionFragment;
    "buyBase(address,uint128,uint128)": FunctionFragment;
    "buyBasePreview(uint128)": FunctionFragment;
    "buyFYToken(address,uint128,uint128)": FunctionFragment;
    "buyFYTokenPreview(uint128)": FunctionFragment;
    "decimals()": FunctionFragment;
    "fyToken()": FunctionFragment;
    "fyTokenReserves()": FunctionFragment;
    "getBaseReserves()": FunctionFragment;
    "getFYTokenReserves()": FunctionFragment;
    "mint(address,bool,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "rate()": FunctionFragment;
    "retrieveBase(address)": FunctionFragment;
    "retrieveFYToken(address)": FunctionFragment;
    "sellBase(address,uint128)": FunctionFragment;
    "sellBasePreview(uint128)": FunctionFragment;
    "sellFYToken(address,uint128)": FunctionFragment;
    "sellFYTokenPreview(uint128)": FunctionFragment;
    "symbol()": FunctionFragment;
    "sync()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "update(uint112,uint112)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "base", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "baseReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyBase",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyBasePreview",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyFYToken",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyFYTokenPreview",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "fyToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fyTokenReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFYTokenReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, boolean, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "rate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "retrieveBase",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveFYToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "sellBase",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellBasePreview",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellFYToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellFYTokenPreview",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "sync", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "base", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyBase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyBasePreview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyFYToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyFYTokenPreview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fyToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fyTokenReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBaseReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFYTokenReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "retrieveBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveFYToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellBase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellBasePreview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellFYToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellFYTokenPreview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sync", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Liquidity(uint32,address,address,int256,int256,int256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Trade(uint32,address,address,int256,int256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Trade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class PoolMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PoolMockInterface;

  functions: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(guy: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    base(overrides?: CallOverrides): Promise<[string]>;

    baseReserves(overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      to: string,
      minBaseOut: BigNumberish,
      minFYTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyBase(
      to: string,
      baseOut: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyBasePreview(
      baseOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buyFYToken(
      to: string,
      fyTokenOut: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyFYTokenPreview(
      fyTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    fyToken(overrides?: CallOverrides): Promise<[string]>;

    fyTokenReserves(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBaseReserves(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFYTokenReserves(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      to: string,
      arg1: boolean,
      minTokensMinted: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    rate(overrides?: CallOverrides): Promise<[BigNumber]>;

    retrieveBase(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    retrieveFYToken(
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellBase(
      to: string,
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellBasePreview(
      baseIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    sellFYToken(
      to: string,
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellFYTokenPreview(
      fyTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    sync(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      src: string,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    update(
      baseReserves_: BigNumberish,
      fyTokenReserves_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(guy: string, overrides?: CallOverrides): Promise<BigNumber>;

  base(overrides?: CallOverrides): Promise<string>;

  baseReserves(overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    to: string,
    minBaseOut: BigNumberish,
    minFYTokenOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyBase(
    to: string,
    baseOut: BigNumberish,
    max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyBasePreview(
    baseOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buyFYToken(
    to: string,
    fyTokenOut: BigNumberish,
    max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyFYTokenPreview(
    fyTokenOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  fyToken(overrides?: CallOverrides): Promise<string>;

  fyTokenReserves(overrides?: CallOverrides): Promise<BigNumber>;

  getBaseReserves(overrides?: CallOverrides): Promise<BigNumber>;

  getFYTokenReserves(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    to: string,
    arg1: boolean,
    minTokensMinted: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  rate(overrides?: CallOverrides): Promise<BigNumber>;

  retrieveBase(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  retrieveFYToken(
    to: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellBase(
    to: string,
    min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellBasePreview(
    baseIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sellFYToken(
    to: string,
    min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellFYTokenPreview(
    fyTokenIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  sync(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    dst: string,
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    src: string,
    dst: string,
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  update(
    baseReserves_: BigNumberish,
    fyTokenReserves_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(guy: string, overrides?: CallOverrides): Promise<BigNumber>;

    base(overrides?: CallOverrides): Promise<string>;

    baseReserves(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      to: string,
      minBaseOut: BigNumberish,
      minFYTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        tokensBurned: BigNumber;
        baseOut: BigNumber;
        fyTokenOut: BigNumber;
      }
    >;

    buyBase(
      to: string,
      baseOut: BigNumberish,
      max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyBasePreview(
      baseOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyFYToken(
      to: string,
      fyTokenOut: BigNumberish,
      max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyFYTokenPreview(
      fyTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    fyToken(overrides?: CallOverrides): Promise<string>;

    fyTokenReserves(overrides?: CallOverrides): Promise<BigNumber>;

    getBaseReserves(overrides?: CallOverrides): Promise<BigNumber>;

    getFYTokenReserves(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      to: string,
      arg1: boolean,
      minTokensMinted: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        baseIn: BigNumber;
        fyTokenIn: BigNumber;
        tokensMinted: BigNumber;
      }
    >;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    rate(overrides?: CallOverrides): Promise<BigNumber>;

    retrieveBase(to: string, overrides?: CallOverrides): Promise<BigNumber>;

    retrieveFYToken(to: string, overrides?: CallOverrides): Promise<BigNumber>;

    sellBase(
      to: string,
      min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellBasePreview(
      baseIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellFYToken(
      to: string,
      min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellFYTokenPreview(
      fyTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    sync(overrides?: CallOverrides): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      dst: string,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      src: string,
      dst: string,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    update(
      baseReserves_: BigNumberish,
      fyTokenReserves_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Liquidity(
      maturity?: null,
      from?: string | null,
      to?: string | null,
      baseAmount?: null,
      fyTokenAmount?: null,
      poolTokenAmount?: null
    ): TypedEventFilter<
      [number, string, string, BigNumber, BigNumber, BigNumber],
      {
        maturity: number;
        from: string;
        to: string;
        baseAmount: BigNumber;
        fyTokenAmount: BigNumber;
        poolTokenAmount: BigNumber;
      }
    >;

    OwnershipTransferred(
      oldOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { oldOwner: string; newOwner: string }
    >;

    Trade(
      maturity?: null,
      from?: string | null,
      to?: string | null,
      baseAmount?: null,
      fyTokenAmount?: null
    ): TypedEventFilter<
      [number, string, string, BigNumber, BigNumber],
      {
        maturity: number;
        from: string;
        to: string;
        baseAmount: BigNumber;
        fyTokenAmount: BigNumber;
      }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;
  };

  estimateGas: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(guy: string, overrides?: CallOverrides): Promise<BigNumber>;

    base(overrides?: CallOverrides): Promise<BigNumber>;

    baseReserves(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      to: string,
      minBaseOut: BigNumberish,
      minFYTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyBase(
      to: string,
      baseOut: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyBasePreview(
      baseOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyFYToken(
      to: string,
      fyTokenOut: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyFYTokenPreview(
      fyTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    fyToken(overrides?: CallOverrides): Promise<BigNumber>;

    fyTokenReserves(overrides?: CallOverrides): Promise<BigNumber>;

    getBaseReserves(overrides?: CallOverrides): Promise<BigNumber>;

    getFYTokenReserves(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      to: string,
      arg1: boolean,
      minTokensMinted: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    rate(overrides?: CallOverrides): Promise<BigNumber>;

    retrieveBase(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    retrieveFYToken(
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellBase(
      to: string,
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellBasePreview(
      baseIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellFYToken(
      to: string,
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellFYTokenPreview(
      fyTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    sync(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      src: string,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    update(
      baseReserves_: BigNumberish,
      fyTokenReserves_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      guy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    base(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      to: string,
      minBaseOut: BigNumberish,
      minFYTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyBase(
      to: string,
      baseOut: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyBasePreview(
      baseOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyFYToken(
      to: string,
      fyTokenOut: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyFYTokenPreview(
      fyTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fyToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fyTokenReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBaseReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFYTokenReserves(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      to: string,
      arg1: boolean,
      minTokensMinted: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    retrieveBase(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    retrieveFYToken(
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellBase(
      to: string,
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellBasePreview(
      baseIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sellFYToken(
      to: string,
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellFYTokenPreview(
      fyTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sync(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      src: string,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    update(
      baseReserves_: BigNumberish,
      fyTokenReserves_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
