/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ICDPMgrInterface extends ethers.utils.Interface {
  functions: {
    "cdpAllow(uint256,address,uint256)": FunctionFragment;
    "cdpCan(address,uint256,address)": FunctionFragment;
    "flux(uint256,address,uint256)": FunctionFragment;
    "frob(uint256,int256,int256)": FunctionFragment;
    "give(uint256,address)": FunctionFragment;
    "ilks(uint256)": FunctionFragment;
    "move(uint256,address,uint256)": FunctionFragment;
    "owns(uint256)": FunctionFragment;
    "urns(uint256)": FunctionFragment;
    "vat()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cdpAllow",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cdpCan",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "flux",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "frob",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "give",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "ilks", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "move",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owns", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "urns", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "vat", values?: undefined): string;

  decodeFunctionResult(functionFragment: "cdpAllow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cdpCan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flux", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "frob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "give", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ilks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "move", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owns", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "urns", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vat", data: BytesLike): Result;

  events: {};
}

export class ICDPMgr extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ICDPMgrInterface;

  functions: {
    cdpAllow(
      cdp: BigNumberish,
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cdpCan(
      owner: string,
      cdp: BigNumberish,
      usr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    flux(
      cdp: BigNumberish,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    frob(
      cdp: BigNumberish,
      dink: BigNumberish,
      dart: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    give(
      cdp: BigNumberish,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ilks(cdp: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    move(
      cdp: BigNumberish,
      dst: string,
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owns(cdp: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    urns(cdp: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    vat(overrides?: CallOverrides): Promise<[string]>;
  };

  cdpAllow(
    cdp: BigNumberish,
    usr: string,
    ok: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cdpCan(
    owner: string,
    cdp: BigNumberish,
    usr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  flux(
    cdp: BigNumberish,
    dst: string,
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  frob(
    cdp: BigNumberish,
    dink: BigNumberish,
    dart: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  give(
    cdp: BigNumberish,
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ilks(cdp: BigNumberish, overrides?: CallOverrides): Promise<string>;

  move(
    cdp: BigNumberish,
    dst: string,
    rad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owns(cdp: BigNumberish, overrides?: CallOverrides): Promise<string>;

  urns(cdp: BigNumberish, overrides?: CallOverrides): Promise<string>;

  vat(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    cdpAllow(
      cdp: BigNumberish,
      usr: string,
      ok: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cdpCan(
      owner: string,
      cdp: BigNumberish,
      usr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flux(
      cdp: BigNumberish,
      dst: string,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    frob(
      cdp: BigNumberish,
      dink: BigNumberish,
      dart: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    give(
      cdp: BigNumberish,
      usr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ilks(cdp: BigNumberish, overrides?: CallOverrides): Promise<string>;

    move(
      cdp: BigNumberish,
      dst: string,
      rad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owns(cdp: BigNumberish, overrides?: CallOverrides): Promise<string>;

    urns(cdp: BigNumberish, overrides?: CallOverrides): Promise<string>;

    vat(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    cdpAllow(
      cdp: BigNumberish,
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cdpCan(
      owner: string,
      cdp: BigNumberish,
      usr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flux(
      cdp: BigNumberish,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    frob(
      cdp: BigNumberish,
      dink: BigNumberish,
      dart: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    give(
      cdp: BigNumberish,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ilks(cdp: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    move(
      cdp: BigNumberish,
      dst: string,
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owns(cdp: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    urns(cdp: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    vat(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cdpAllow(
      cdp: BigNumberish,
      usr: string,
      ok: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cdpCan(
      owner: string,
      cdp: BigNumberish,
      usr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    flux(
      cdp: BigNumberish,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    frob(
      cdp: BigNumberish,
      dink: BigNumberish,
      dart: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    give(
      cdp: BigNumberish,
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ilks(
      cdp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    move(
      cdp: BigNumberish,
      dst: string,
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owns(
      cdp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    urns(
      cdp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vat(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
