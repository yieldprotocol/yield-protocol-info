/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { ICDPMgr, ICDPMgrInterface } from "../ICDPMgr";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cdp",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "usr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "ok",
        type: "uint256",
      },
    ],
    name: "cdpAllow",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "cdp",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "usr",
        type: "address",
      },
    ],
    name: "cdpCan",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cdp",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "dst",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "wad",
        type: "uint256",
      },
    ],
    name: "flux",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cdp",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "dink",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "dart",
        type: "int256",
      },
    ],
    name: "frob",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cdp",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "usr",
        type: "address",
      },
    ],
    name: "give",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cdp",
        type: "uint256",
      },
    ],
    name: "ilks",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cdp",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "dst",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "rad",
        type: "uint256",
      },
    ],
    name: "move",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cdp",
        type: "uint256",
      },
    ],
    name: "owns",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cdp",
        type: "uint256",
      },
    ],
    name: "urns",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "vat",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class ICDPMgr__factory {
  static readonly abi = _abi;
  static createInterface(): ICDPMgrInterface {
    return new utils.Interface(_abi) as ICDPMgrInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ICDPMgr {
    return new Contract(address, _abi, signerOrProvider) as ICDPMgr;
  }
}
